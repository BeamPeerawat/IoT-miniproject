<?php
require __DIR__.'/../config/database.php';
require __DIR__.'/../config/telegram_config.php';
require __DIR__.'/../helpers/telegram_notify.php';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
define('TEMP_HIGH', 31.0);      // ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
define('TEMP_LOW', 31.0);       // ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
define('LIGHT_THRESHOLD', 2000);  // ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢
define('MOTION_THRESHOLD', 3000); // ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
define('SOUND_THRESHOLD', 3000);  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á

class HomeAutomation {
    private $pdo;
    private $sensor;
    private $devices;
    private $newStatus = [];

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    const DEVICE_LIGHT = 1; // ‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
    const DEVICE_INDOOR_LIGHT = 2; // ‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
    const DEVICE_FAN = 3; // ‡∏û‡∏±‡∏î‡∏•‡∏°

    public function __construct($pdo) {
        $this->pdo = $pdo;
    }

    private function getSensorData() {
        $stmt = $this->pdo->prepare("SELECT * FROM sensors ORDER BY created_at DESC LIMIT 1");
        $stmt->execute();
        $this->sensor = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$this->sensor) {
            throw new Exception("No sensor data available");
        }
    }

    private function getDevices() {
        $stmt = $this->pdo->prepare("SELECT * FROM devices");
        $stmt->execute();
        $this->devices = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    private function checkTemperature() {
        if ($this->sensor['temperature'] > TEMP_HIGH) {
            $this->newStatus[self::DEVICE_FAN] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
            sendTelegramNotification(
                "üå°Ô∏è <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á</b>\n" .
                "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {$this->sensor['temperature']}¬∞C\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );
        } elseif ($this->sensor['temperature'] < TEMP_LOW) {
            $this->newStatus[self::DEVICE_FAN] = 0; // ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
        }
    }

    private function checkLight() {
        if ($this->sensor['light_level'] < LIGHT_THRESHOLD) {
            $this->newStatus[self::DEVICE_LIGHT] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
            sendTelegramNotification(
                "üí° <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á</b>\n" .
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏™‡∏á: {$this->sensor['light_level']}\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );
        } else {
            $this->newStatus[self::DEVICE_LIGHT] = 0; // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
        }
    }

    private function checkMotion() {
        if ($this->sensor['motion_detected'] > MOTION_THRESHOLD) {
            $this->newStatus[self::DEVICE_INDOOR_LIGHT] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
            sendTelegramNotification(
                "üö® <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß</b>\n" .
                "‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß: {$this->sensor['motion_detected']}\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );
        } else {
            $this->newStatus[self::DEVICE_INDOOR_LIGHT] = 0; // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
        }
    }

    private function checkSound() {
        if ($this->sensor['sound_level'] > SOUND_THRESHOLD) {
            $this->newStatus[self::DEVICE_FAN] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
            $this->newStatus[self::DEVICE_INDOOR_LIGHT] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô

            sendTelegramNotification(
                "üì¢ <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á</b>\n" .
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {$this->sensor['sound_level']}\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏î‡∏•‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );

            // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            $this->pdo->prepare(
                "UPDATE devices SET auto_off_time = DATE_ADD(NOW(), INTERVAL 5 SECOND) WHERE id IN (?, ?)"
            )->execute([self::DEVICE_FAN, self::DEVICE_INDOOR_LIGHT]);
        }
    }

    private function checkAutoOffDevices() {
        $stmt = $this->pdo->query("SELECT id FROM devices WHERE auto_off_time <= NOW()");
        $expiredDevices = $stmt->fetchAll(PDO::FETCH_COLUMN);

        foreach ($expiredDevices as $id) {
            $this->newStatus[$id] = 0; // ‡∏õ‡∏¥‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            $this->pdo->prepare("UPDATE devices SET auto_off_time = NULL WHERE id = ?")->execute([$id]);

            sendTelegramNotification(
                "‚è≤Ô∏è <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</b>\n" .
                "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ID: $id ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
            );
        }
    }

    private function updateDevices() {
        $stmt = $this->pdo->prepare("
            UPDATE devices 
            SET status = :status, 
                last_updated = NOW() 
            WHERE id = :id AND status != :status AND manual_override = 0
        ");
    
        foreach ($this->devices as $device) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ manual_override ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1
            if (isset($this->newStatus[$device['id']]) && $device['manual_override'] == 0) {
                $stmt->execute([
                    ':status' => $this->newStatus[$device['id']],
                    ':id' => $device['id']
                ]);
            }
        }
    }

    public function run() {
        try {
            $this->pdo->beginTransaction();

            $this->getSensorData();
            $this->getDevices();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ
            $this->checkTemperature();
            $this->checkLight();
            $this->checkMotion();
            $this->checkSound();
            $this->checkAutoOffDevices();

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            $this->updateDevices();

            $this->pdo->commit();

            return [
                'status' => 'success',
                'message' => 'Device states updated successfully',
                'updates' => $this->newStatus
            ];

        } catch (Exception $e) {
            if ($this->pdo->inTransaction()) {
                $this->pdo->rollBack();
            }

            error_log("Automation error: " . $e->getMessage());

            sendTelegramNotification(
                "‚ö†Ô∏è <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</b>\n" .
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {$e->getMessage()}"
            );

            return [
                'status' => 'error',
                'message' => 'Automation update failed: ' . $e->getMessage()
            ];
        }
    }
}

// ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
$automation = new HomeAutomation($pdo);
echo json_encode($automation->run());
?>
