Code config\database.php :
<?php
$host = 'bahixnsz3iv7yk6dhi8s-mysql.services.clever-cloud.com';
$dbname = 'bahixnsz3iv7yk6dhi8s';
$user = 'uxwgnyyqzuoqyffe';
$pass = 'FlPcEI8TCG55oFNoKvdp';
$api_key = 'y1xneVWfBv';

try {
  $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $pass);
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
  die("Database connection failed: " . $e->getMessage());
}
?>

Code config\telegram_config.php :
<?php
$telegram_config = [
    'bot_token' => '7422166185:AAGhIER-tM1bPLtUozN_E5-4fB8wlatrvQE',
    'chat_id' => '2140071171' // ‡πÉ‡∏™‡πà chat_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
];
?>

Code helpers\telegram_notify.php :
<?php
function sendTelegramNotification($message) {
    global $telegram_config;
    
    $url = "https://api.telegram.org/bot{$telegram_config['bot_token']}/sendMessage";
    
    $data = [
        'chat_id' => $telegram_config['chat_id'],
        'text' => $message,
        'parse_mode' => 'HTML'
    ];
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $result = curl_exec($ch);
    curl_close($ch);
    
    return $result;
}
?>

Code api\sensors.php :
<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);

header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");

require __DIR__.'/../config/database.php';

$response = ['status' => 'error', 'message' => 'Invalid request'];

try {
    $method = $_SERVER['REQUEST_METHOD'];
    $apiKey = $_GET['api_key'] ?? '';
    
    if ($apiKey !== $api_key) {
        throw new Exception('Unauthorized', 401);
    }

    switch ($method) {
        case 'POST':
            // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å body ‡∏Ç‡∏≠‡∏á request
            $data = json_decode(file_get_contents("php://input"), true);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ JSON ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if ($data === null) {
                throw new Exception('Invalid JSON received', 400);
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ key ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
            if (!isset($data['temperature'], $data['humidity'], $data['light_level'], $data['motion_detected'], $data['sound_level'])) {
                throw new Exception('Missing required data', 400);
            }

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            $stmt = $pdo->prepare("
                INSERT INTO sensors 
                (temperature, humidity, light_level, motion_detected, sound_level)
                VALUES (:temp, :hum, :light, :motion, :sound)
            ");
            
            $stmt->execute([
                ':temp' => $data['temperature'],
                ':hum' => $data['humidity'],
                ':light' => $data['light_level'],
                ':motion' => $data['motion_detected'],
                ':sound' => $data['sound_level']
            ]);

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ automation.php ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            require __DIR__.'/automation.php';

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            $response = ['status' => 'success', 'message' => 'Data recorded'];
            break;

        case 'GET':
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            $stmt = $pdo->query("SELECT * FROM sensors ORDER BY created_at DESC");
            $sensors = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            $response = ['status' => 'success', 'data' => $sensors];
            break;

        default:
            throw new Exception('Method not allowed', 405);
    }
} catch (Exception $e) {
    http_response_code($e->getCode() ?: 500);
    $response['message'] = $e->getMessage();
}

echo json_encode($response);

Code api\devices.php :
<?php
header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");

require __DIR__.'/../config/database.php';
require __DIR__.'/../config/telegram_config.php'; 

$response = ['status' => 'error', 'message' => 'Invalid request'];

try {
    $method = $_SERVER['REQUEST_METHOD'];
    $apiKey = $_GET['api_key'] ?? '';

    if ($apiKey !== $api_key) {
        throw new Exception('Unauthorized', 401);
    }

    switch ($method) {
        case 'GET':
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            $stmt = $pdo->query("SELECT * FROM devices");
            $devices = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $response = ['status' => 'success', 'data' => $devices];
            break;

            case 'POST':
                $data = json_decode(file_get_contents("php://input"), true);
            
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                if (!isset($data['action'], $data['device_id'], $data['status'])) {
                    throw new Exception('Missing required data', 400);
                }
            
                if ($data['action'] !== 'update') {
                    throw new Exception('Invalid action', 400);
                }
            
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ device_id ‡πÅ‡∏•‡∏∞ status
                if (!is_numeric($data['device_id']) || !in_array($data['status'], [0, 1])) {
                    throw new Exception('Invalid device_id or status', 400);
                }
            
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                $stmt = $pdo->prepare("SELECT COUNT(*) FROM devices WHERE id = :id");
                $stmt->execute([':id' => $data['device_id']]);
                if ($stmt->fetchColumn() == 0) {
                    throw new Exception('Device not found', 404);
                }
            
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
                $manualOverride = isset($data['manual_override']) ? (int)$data['manual_override'] : 0; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô integer (0 ‡∏´‡∏£‡∏∑‡∏≠ 1)
                $stmt = $pdo->prepare("UPDATE devices 
                    SET status = :status, 
                        last_updated = NOW(), 
                        manual_override = :manual_override 
                    WHERE id = :id");
            
                $stmt->bindParam(':id', $data['device_id'], PDO::PARAM_INT);
                $stmt->bindParam(':status', $data['status'], PDO::PARAM_INT);
                $stmt->bindParam(':manual_override', $manualOverride, PDO::PARAM_INT);
                $stmt->execute();
            
                $response = ['status' => 'success', 'message' => 'Device updated', 'manual_override' => $manualOverride];
                break;

        default:
            throw new Exception('Method not allowed', 405);
    }
} catch (Exception $e) {
    http_response_code($e->getCode() ?: 500);
    $response['message'] = $e->getMessage();
}

echo json_encode($response);
?>

Code api\automation.php :
<?php
require __DIR__.'/../config/database.php';
require __DIR__.'/../config/telegram_config.php';
require __DIR__.'/../helpers/telegram_notify.php';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
define('TEMP_HIGH', 31.0);      // ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
define('TEMP_LOW', 31.0);       // ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
define('LIGHT_THRESHOLD', 2000);  // ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢
define('MOTION_THRESHOLD', 3000); // ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
define('SOUND_THRESHOLD', 3000);  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á

class HomeAutomation {
    private $pdo;
    private $sensor;
    private $devices;
    private $newStatus = [];

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    const DEVICE_LIGHT = 1; // ‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
    const DEVICE_INDOOR_LIGHT = 2; // ‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
    const DEVICE_FAN = 3; // ‡∏û‡∏±‡∏î‡∏•‡∏°

    public function __construct($pdo) {
        $this->pdo = $pdo;
    }

    private function getSensorData() {
        $stmt = $this->pdo->prepare("SELECT * FROM sensors ORDER BY created_at DESC LIMIT 1");
        $stmt->execute();
        $this->sensor = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$this->sensor) {
            throw new Exception("No sensor data available");
        }
    }

    private function getDevices() {
        $stmt = $this->pdo->prepare("SELECT * FROM devices");
        $stmt->execute();
        $this->devices = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    private function checkTemperature() {
        if ($this->sensor['temperature'] > TEMP_HIGH) {
            $this->newStatus[self::DEVICE_FAN] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
            sendTelegramNotification(
                "üå°Ô∏è <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á</b>\n" .
                "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {$this->sensor['temperature']}¬∞C\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );
        } elseif ($this->sensor['temperature'] < TEMP_LOW) {
            $this->newStatus[self::DEVICE_FAN] = 0; // ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
        }
    }

    private function checkLight() {
        if ($this->sensor['light_level'] < LIGHT_THRESHOLD) {
            $this->newStatus[self::DEVICE_LIGHT] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
            sendTelegramNotification(
                "üí° <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á</b>\n" .
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏™‡∏á: {$this->sensor['light_level']}\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );
        } else {
            $this->newStatus[self::DEVICE_LIGHT] = 0; // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô
        }
    }

    private function checkMotion() {
        if ($this->sensor['motion_detected'] > MOTION_THRESHOLD) {
            $this->newStatus[self::DEVICE_INDOOR_LIGHT] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
            sendTelegramNotification(
                "üö® <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß</b>\n" .
                "‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß: {$this->sensor['motion_detected']}\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );
        } else {
            $this->newStatus[self::DEVICE_INDOOR_LIGHT] = 0; // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
        }
    }

    private function checkSound() {
        if ($this->sensor['sound_level'] > SOUND_THRESHOLD) {
            $this->newStatus[self::DEVICE_FAN] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏±‡∏î‡∏•‡∏°
            $this->newStatus[self::DEVICE_INDOOR_LIGHT] = 1; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô

            sendTelegramNotification(
                "üì¢ <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á</b>\n" .
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {$this->sensor['sound_level']}\n" .
                "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏î‡∏•‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            );

            // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            $this->pdo->prepare(
                "UPDATE devices SET auto_off_time = DATE_ADD(NOW(), INTERVAL 5 SECOND) WHERE id IN (?, ?)"
            )->execute([self::DEVICE_FAN, self::DEVICE_INDOOR_LIGHT]);
        }
    }

    private function checkAutoOffDevices() {
        $stmt = $this->pdo->query("SELECT id FROM devices WHERE auto_off_time <= NOW()");
        $expiredDevices = $stmt->fetchAll(PDO::FETCH_COLUMN);

        foreach ($expiredDevices as $id) {
            $this->newStatus[$id] = 0; // ‡∏õ‡∏¥‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            $this->pdo->prepare("UPDATE devices SET auto_off_time = NULL WHERE id = ?")->execute([$id]);

            sendTelegramNotification(
                "‚è≤Ô∏è <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</b>\n" .
                "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ID: $id ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
            );
        }
    }

    private function updateDevices() {
        $stmt = $this->pdo->prepare("
            UPDATE devices 
            SET status = :status, 
                last_updated = NOW() 
            WHERE id = :id AND status != :status AND manual_override = 0
        ");
    
        foreach ($this->devices as $device) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ manual_override ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1
            if (isset($this->newStatus[$device['id']]) && $device['manual_override'] == 0) {
                $stmt->execute([
                    ':status' => $this->newStatus[$device['id']],
                    ':id' => $device['id']
                ]);
            }
        }
    }

    public function run() {
        try {
            $this->pdo->beginTransaction();

            $this->getSensorData();
            $this->getDevices();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ
            $this->checkTemperature();
            $this->checkLight();
            $this->checkMotion();
            $this->checkSound();
            $this->checkAutoOffDevices();

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            $this->updateDevices();

            $this->pdo->commit();

            return [
                'status' => 'success',
                'message' => 'Device states updated successfully',
                'updates' => $this->newStatus
            ];

        } catch (Exception $e) {
            if ($this->pdo->inTransaction()) {
                $this->pdo->rollBack();
            }

            error_log("Automation error: " . $e->getMessage());

            sendTelegramNotification(
                "‚ö†Ô∏è <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</b>\n" .
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {$e->getMessage()}"
            );

            return [
                'status' => 'error',
                'message' => 'Automation update failed: ' . $e->getMessage()
            ];
        }
    }
}

// ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
$automation = new HomeAutomation($pdo);
echo json_encode($automation->run());
?>
